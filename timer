<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>Timer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background: #f8f8f8;
            color: #2a2a2a;
            overflow: hidden;
            height: 100vh;
            display: flex;
            touch-action: manipulation;
        }

        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100vw;
            padding: 24px;
            background: #f8f8f8;
            position: relative;
        }

        .control-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 32px;
            height: 32px;
        }

        .start-pause-btn {
            background: none;
            border: none;
            color: #2a2a2a;
            font-size: 12px;
            font-weight: 400;
            letter-spacing: 0.8px;
            cursor: pointer;
            text-transform: lowercase;
            padding: 0;
            transition: opacity 0.2s ease;
        }

        .start-pause-btn:hover {
            opacity: 0.6;
        }

        .phase-counter {
            font-size: 11px;
            color: #888;
            font-weight: 300;
            letter-spacing: 0.5px;
        }

        .main-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        .timer-circle {
            width: 280px;
            height: 280px;
            border-radius: 50%;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #fff;
            border: 1px solid #e8e8e8;
            transition: border-color 0.4s ease;
        }

        .timer-circle.active {
            border-color: #bbb;
        }

        .timer-display {
            font-size: 48px;
            font-weight: 200;
            color: #2a2a2a;
            letter-spacing: -0.5px;
            font-family: 'Helvetica Neue', Arial, sans-serif;
        }

        .progress-ring {
            position: absolute;
            top: -1px;
            left: -1px;
            width: 282px;
            height: 282px;
            transform: rotate(-90deg);
        }

        .progress-ring-circle {
            fill: none;
            stroke-width: 1;
            transition: stroke-dashoffset 1s linear;
        }

        .progress-bg {
            stroke: #f0f0f0;
        }

        .progress-bar {
            stroke: #2a2a2a;
            opacity: 0.3;
        }

        .phase-label {
            position: absolute;
            bottom: 60px;
            font-size: 9px;
            color: #aaa;
            text-transform: lowercase;
            letter-spacing: 1px;
            font-weight: 300;
        }

        .status-dots {
            position: absolute;
            bottom: 24px;
            display: flex;
            gap: 6px;
        }

        .dot {
            width: 3px;
            height: 3px;
            border-radius: 50%;
            background: #ddd;
            transition: background 0.2s ease;
        }

        .dot.active {
            background: #2a2a2a;
        }

        .dot.done {
            background: #888;
        }

        @media screen and (orientation: landscape) {
            .container {
                padding: 20px 40px;
                flex-direction: row;
                align-items: center;
            }

            .control-bar {
                position: absolute;
                top: 20px;
                left: 40px;
                right: 40px;
                margin-bottom: 0;
            }

            .main-area {
                width: 100%;
                margin-top: 40px;
            }

            .timer-circle {
                width: 220px;
                height: 220px;
            }

            .progress-ring {
                width: 222px;
                height: 222px;
            }

            .timer-display {
                font-size: 40px;
            }

            .phase-label {
                bottom: 40px;
            }

            .status-dots {
                bottom: 20px;
            }
        }

        .completion-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(248, 248, 248, 0.95);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .completion-content {
            text-align: center;
        }

        .completion-content h2 {
            font-size: 16px;
            font-weight: 300;
            color: #2a2a2a;
            margin-bottom: 24px;
            letter-spacing: 0.5px;
            text-transform: lowercase;
        }

        .restart-btn {
            background: none;
            border: none;
            color: #2a2a2a;
            font-size: 11px;
            font-weight: 400;
            letter-spacing: 0.8px;
            cursor: pointer;
            text-transform: lowercase;
            transition: opacity 0.2s ease;
        }

        .restart-btn:hover {
            opacity: 0.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="control-bar">
            <button class="start-pause-btn" id="startPauseBtn">start</button>
            <div class="phase-counter">
                <span id="currentPhaseNum">1</span> of 9
            </div>
        </div>

        <div class="main-area">
            <div class="timer-circle" id="timerCircle">
                <svg class="progress-ring">
                    <circle class="progress-ring-circle progress-bg" cx="141" cy="141" r="140"></circle>
                    <circle class="progress-ring-circle progress-bar" id="progressBar" cx="141" cy="141" r="140" 
                            stroke-dasharray="879.65" stroke-dashoffset="879.65"></circle>
                </svg>
                <div class="timer-display" id="timerDisplay">1:00</div>
            </div>
            
            <div class="phase-label" id="phaseLabel">recovery</div>
            
            <div class="status-dots" id="statusDots">
                <div class="dot active"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
        </div>
    </div>

    <div class="completion-overlay" id="completionOverlay">
        <div class="completion-content">
            <h2>session complete</h2>
            <button class="restart-btn" onclick="restartWorkout()">restart</button>
        </div>
    </div>

    <script>
        class Timer {
            constructor() {
                this.phases = [
                    { duration: 60, name: 'recovery' },
                    { duration: 240, name: 'intensity' },
                    { duration: 180, name: 'recovery' },
                    { duration: 240, name: 'intensity' },
                    { duration: 180, name: 'recovery' },
                    { duration: 240, name: 'intensity' },
                    { duration: 180, name: 'recovery' },
                    { duration: 240, name: 'intensity' },
                    { duration: 60, name: 'recovery' }
                ];
                
                this.currentPhase = 0;
                this.timeLeft = this.phases[0].duration;
                this.running = false;
                this.interval = null;
                
                this.init();
                this.render();
            }

            init() {
                this.startBtn = document.getElementById('startPauseBtn');
                this.display = document.getElementById('timerDisplay');
                this.circle = document.getElementById('timerCircle');
                this.progress = document.getElementById('progressBar');
                this.phaseNum = document.getElementById('currentPhaseNum');
                this.phaseLabel = document.getElementById('phaseLabel');
                this.dots = document.getElementById('statusDots');
                this.overlay = document.getElementById('completionOverlay');
                
                this.startBtn.addEventListener('click', () => this.toggle());
            }

            toggle() {
                if (this.running) {
                    this.pause();
                } else {
                    this.start();
                }
            }

            start() {
                this.running = true;
                this.startBtn.textContent = 'pause';
                this.circle.classList.add('active');
                this.interval = setInterval(() => this.tick(), 1000);
            }

            pause() {
                this.running = false;
                this.startBtn.textContent = 'start';
                this.circle.classList.remove('active');
                clearInterval(this.interval);
            }

            tick() {
                this.timeLeft--;
                
                if (this.timeLeft < 0) {
                    this.nextPhase();
                } else {
                    this.render();
                }
            }

            nextPhase() {
                this.currentPhase++;
                
                if (this.currentPhase >= this.phases.length) {
                    this.complete();
                    return;
                }
                
                this.timeLeft = this.phases[this.currentPhase].duration;
                this.render();
            }

            complete() {
                this.pause();
                this.overlay.style.display = 'flex';
            }

            render() {
                const phase = this.phases[this.currentPhase];
                const minutes = Math.floor(this.timeLeft / 60);
                const seconds = this.timeLeft % 60;
                
                // Update display
                this.display.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                this.phaseNum.textContent = this.currentPhase + 1;
                this.phaseLabel.textContent = phase.name;
                
                // Update progress
                const elapsed = phase.duration - this.timeLeft;
                const circumference = 879.65;
                const offset = circumference - (elapsed / phase.duration) * circumference;
                this.progress.style.strokeDashoffset = offset;
                
                // Update dots
                const dots = this.dots.children;
                for (let i = 0; i < dots.length; i++) {
                    if (i < this.currentPhase) {
                        dots[i].className = 'dot done';
                    } else if (i === this.currentPhase) {
                        dots[i].className = 'dot active';
                    } else {
                        dots[i].className = 'dot';
                    }
                }
            }

            reset() {
                this.pause();
                this.currentPhase = 0;
                this.timeLeft = this.phases[0].duration;
                this.render();
                this.overlay.style.display = 'none';
            }
        }

        const timer = new Timer();

        function restartWorkout() {
            timer.reset();
        }

        // Prevent zoom
        let lastTouch = 0;
        document.addEventListener('touchend', function (e) {
            const now = (new Date()).getTime();
            if (now - lastTouch <= 300) {
                e.preventDefault();
            }
            lastTouch = now;
        }, false);

        // Keep screen awake
        if ('wakeLock' in navigator) {
            navigator.wakeLock.request('screen').catch(() => {});
        }
    </script>
</body>
</html>
